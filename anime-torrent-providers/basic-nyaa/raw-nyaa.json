{
  "id": "raw-nyaa-seanime",
  "name": "Nyaa (Raw)",
  "description": "Nyaa Raw search",
  "manifestURI": "https://raw.githubusercontent.com/5rahim/seanime-extensions/refs/heads/main/anime-torrent-providers/basic-nyaa/basic-nyaa.json",
  "version": "1.0.0",
  "author": "Nat",
  "type": "anime-torrent-provider",
  "language": "typescript",
  "lang": "multi",
  "payload": "/// <reference path=\"../anime-torrent-provider.d.ts\" />\n\nclass Provider {\n\n    api = \"https://nyaa.si/?page=rss&c=1_4&f=0\"\n\n    getSettings(): AnimeProviderSettings {\n        return {\n            canSmartSearch: false,\n            smartSearchFilters: [],\n            supportsAdult: false,\n            type: \"main\",\n        }\n    }\n\n    async fetchTorrents(url: string): Promise<NyaaTorrent[]> {\n\n        const furl = `${this.api}&q=+${encodeURIComponent(url)}&c=0_0`\n\n        try {\n            console.log(furl)\n            const response = await fetch(furl)\n\n            if (!response.ok) {\n                throw new Error(`Failed to fetch torrents, ${response.statusText}`)\n            }\n\n            const xmlText = await response.text()\n            const torrents = this.parseXML(xmlText)\n            console.log(torrents)\n\n            return torrents\n        }\n        catch (error) {\n            throw new Error(`Error fetching torrents: ${error}`)\n        }\n    }\n\n    private parseXML(xmlText: string): NyaaTorrent[] {\n        const torrents: NyaaTorrent[] = []\n\n        // Helper to extract content between XML tags\n        const getTagContent = (xml: string, tag: string): string => {\n            const regex = new RegExp(`<${tag}[^>]*>([^<]*)</${tag}>`)\n            const match = xml.match(regex)\n            return match ? match[1].trim() : \"\"\n        }\n\n        // Helper to extract content from nyaa namespace tags\n        const getNyaaTagContent = (xml: string, tag: string): string => {\n            const regex = new RegExp(`<nyaa:${tag}[^>]*>([^<]*)</nyaa:${tag}>`)\n            const match = xml.match(regex)\n            return match ? match[1].trim() : \"\"\n        }\n\n        // Split XML into items\n        const itemRegex = /<item>([\\s\\S]*?)<\\/item>/g\n        let match\n\n        let id = 1\n        while ((match = itemRegex.exec(xmlText)) !== null) {\n            const itemXml = match[1]\n\n            const title = getTagContent(itemXml, \"title\")\n            const link = getTagContent(itemXml, \"link\")\n            const pubDate = getTagContent(itemXml, \"pubDate\")\n            const seeders = parseInt(getNyaaTagContent(itemXml, \"seeders\")) || 0\n            const leechers = parseInt(getNyaaTagContent(itemXml, \"leechers\")) || 0\n            const downloads = parseInt(getNyaaTagContent(itemXml, \"downloads\")) || 0\n            const infoHash = getNyaaTagContent(itemXml, \"infoHash\")\n            const size = getNyaaTagContent(itemXml, \"size\")\n\n            // Convert size string (e.g., \"571.3 MiB\") to bytes\n            const sizeInBytes = (() => {\n                const match = size.match(/^([\\d.]+)\\s*([KMGT]iB)$/)\n                if (!match) return 0\n                const [, num, unit] = match\n                const multipliers: { [key: string]: number } = {\n                    \"KiB\": 1024,\n                    \"MiB\": 1024 * 1024,\n                    \"GiB\": 1024 * 1024 * 1024,\n                    \"TiB\": 1024 * 1024 * 1024 * 1024\n                }\n                return Math.round(parseFloat(num) * multipliers[unit])\n            })()\n\n            const torrent: NyaaTorrent = {\n                id: id++,\n                title,\n                link,\n                timestamp: Math.floor(new Date(pubDate).getTime() / 1000),\n                status: \"success\",\n                torrent_url: link,\n                info_hash: infoHash,\n                magnet_uri: `magnet:?xt=urn:btih:${infoHash}`,\n                seeders,\n                leechers,\n                torrent_download_count: downloads,\n                total_size: sizeInBytes,\n                size,\n                num_files: 1,\n                anidb_aid: 0,\n                anidb_eid: 0,\n                anidb_fid: 0,\n                article_url: link,\n                article_title: title,\n                website_url: \"https://nyaa.si\"\n            }\n\n            torrents.push(torrent)\n        }\n\n        return torrents\n    }\n\n    async search(opts: AnimeSearchOptions): Promise<AnimeTorrent[]> {\n        console.log(opts)\n        const torrents = await this.fetchTorrents(opts.query)\n        return torrents.map(t => this.toAnimeTorrent(t))\n    }\n\n    async smartSearch(opts: AnimeSmartSearchOptions): Promise<AnimeTorrent[]> {\n        const ret: AnimeTorrent[] = []\n        return ret\n    }\n\n    async getTorrentInfoHash(torrent: AnimeTorrent): Promise<string> {\n        return torrent.infoHash!\n    }\n\n    async getTorrentMagnetLink(torrent: AnimeTorrent): Promise<string> {\n        return torrent.magnetLink!\n    }\n\n    toAnimeTorrent(torrent: NyaaTorrent): AnimeTorrent {\n        return {\n            name: torrent.title,\n            date: new Date(torrent.timestamp * 1000).toISOString(),\n            size: torrent.total_size,\n            formattedSize: torrent.size,\n            seeders: torrent.seeders,\n            leechers: torrent.leechers,\n            downloadCount: torrent.torrent_download_count,\n            link: torrent.link,\n            downloadUrl: torrent.torrent_url,\n            magnetLink: torrent.magnet_uri,\n            infoHash: torrent.info_hash,\n            resolution: \"\",\n            isBatch: false,\n            isBestRelease: false,\n            confirmed: false,\n        }\n    }\n}\n\ntype NyaaTorrent = {\n    id: number\n    title: string\n    link: string\n    timestamp: number\n    status: string\n    size: string\n    tosho_id?: number\n    nyaa_id?: number\n    nyaa_subdom?: any\n    anidex_id?: number\n    torrent_url: string\n    info_hash: string\n    info_hash_v2?: string\n    magnet_uri: string\n    seeders: number\n    leechers: number\n    torrent_download_count: number\n    tracker_updated?: any\n    nzb_url?: string\n    total_size: number\n    num_files: number\n    anidb_aid: number\n    anidb_eid: number\n    anidb_fid: number\n    article_url: string\n    article_title: string\n    website_url: string\n}\n"
}
